#! /usr/bin/env ruby
# frozen_string_literal: true

unless (root = ENV["RUBOCOP_VERSION_MANAGER_ROOT"])
    raise "set RUBOCOP_VERSION_MANAGER_ROOT and try again"
end

init_gemfile_path = ENV["RUBOCOP_VERSION_MANAGER_GEMFILE"]
version =
    if File.file?(".rubocop-version")
        File.read(".rubocop-version").strip
    elsif (default = ENV["RUBOCOP_VERSION_MANAGER_DEFAULT"])
        default.strip
    else
        raise "no default rubocop version defined and no .rubocop-version file found"
    end

require "bundler"

# When called directly from 'autoproj exec', bundler really removes the complete
# RUBYLIB & PATH. This ensures we are calling the "right" bundler in that case
bundle_path = File.join(ENV["GEM_HOME"], "bin", "bundle")

def with_unbundled_env
    if Bundler.respond_to?(:with_unbundled_env)
        Bundler.with_unbundled_env do
            yield({ "RUBYLIB" => nil })
        end
    else
        Bundler.with_clean_env do
            yield({})
        end
    end
end

version_dir = File.join(root, "versions", version)
gemfile = File.join(version_dir, "Gemfile")
init_gemfile = File.read(init_gemfile_path) if init_gemfile_path

old_init_gemfile_path = File.join(version_dir, "Gemfile.user")
old_init_gemfile = File.read(old_init_gemfile_path) if File.exist?(old_init_gemfile_path)

if !File.directory?(version_dir) || (old_init_gemfile != init_gemfile) || (version == "latest")
    begin
        STDERR.puts "Auto-installing bundler v#{version}"
        FileUtils.mkdir_p(version_dir)
        FileUtils.rm_f "#{gemfile}.lock"
        version_spec =
            if version == "latest"
                ">= 0"
            else
                "= #{version}"
            end

        File.write(gemfile, <<~GEMFILE)
            source "https://rubygems.org"
            RUBOCOP_VERSION = "#{version}"
            gem "rubocop", "#{version_spec}"
            #{init_gemfile}
        GEMFILE

        with_unbundled_env do |env_override|
            Kernel.system(
                env_override,
                Gem.ruby, bundle_path, "install",
                chdir: version_dir, exception: true
            )
        end

        File.write(old_init_gemfile_path, init_gemfile)
    rescue
        FileUtils.rm_rf version_dir
        raise
    end
end

cmdline = [Gem.ruby, bundle_path, "exec", "rubocop", *ARGV]
env = { "BUNDLE_GEMFILE" => gemfile }

with_unbundled_env do |env_override|
    Kernel.exec(env_override.merge(env), *cmdline)
end
